(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{116:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return s})),t.d(e,"metadata",(function(){return u})),t.d(e,"toc",(function(){return l})),t.d(e,"default",(function(){return c}));var o=t(3),r=t(7),i=(t(0),t(123)),a=t(146),s={id:"use-event-logger",title:"useEventLogger",sidebar_label:"useEventLogger"},u={unversionedId:"hooks/use-event-logger",id:"hooks/use-event-logger",isDocsHomePage:!1,title:"useEventLogger",description:"The event logger provides a way to track a set of events.",source:"@site/docs/hooks/use-event-logger.md",slug:"/hooks/use-event-logger",permalink:"/kodiak-ui/hooks/use-event-logger",editUrl:"https://github.com/skyverge/kodiak-ui/tree/master/documentation/docs/hooks/use-event-logger.md",version:"current",sidebar_label:"useEventLogger",sidebar:"docs",previous:{title:"Tooltip",permalink:"/kodiak-ui/components/tooltip"},next:{title:"Forms Example",permalink:"/kodiak-ui/recipes/forms"}},l=[{value:"More complex example",id:"more-complex-example",children:[]}],g={toc:l};function c(n){var e=n.components,s=Object(r.a)(n,["components"]);return Object(i.b)("wrapper",Object(o.a)({},g,s,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The event logger provides a way to track a set of events."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"import {\n  useEventLoggerReducers,\n  useEventLogger,\n} from '@kodiak-ui/hooks/use-event-logger'\n\nfunction ComponentThatLogs() {\n  const logEvent = useEventLogger()\n\n  return (\n    <button\n      onClick={e =>\n        logEvent({\n          name: 'CLICK',\n          payload: e.target?.getAttribute('aria-label'),\n        })\n      }\n      aria-label=\"Logging button\"\n    >\n      Logging button\n    </button>\n  )\n}\n\nfunction App() {\n  // Setup anything that sends to the log to be logged out\n  // this could also be a set transforms before sending to a server\n  useEventLoggerReducers({\n    initialEventReducers: [\n      event => {\n        console.log(event)\n        return event\n      },\n    ],\n  })\n\n  return (\n    <div>\n      <ComponentThatLogs />\n    </div>\n  )\n}\n")),Object(i.b)("h2",{id:"more-complex-example"},"More complex example"),Object(i.b)(a.a,{className:"language-tsx",mdxType:"CodeBlock"},t(168).default))}c.isMDXComponent=!0},168:function(n,e,t){"use strict";t.r(e),e.default='import * as React from \'react\'\nimport {\n  useEventLoggerReducers,\n  useEventLogger,\n  Event,\n} from \'@kodiak-ui/hooks/use-event-logger\'\nimport { useEventLogRoute } from \'@kodiak-ui/hooks\'\nimport {\n  Link,\n  Switch,\n  Route,\n  BrowserRouter,\n  useLocation,\n} from \'react-router-dom\'\nimport {\n  Box,\n  Button,\n  AnchorButton,\n  Grid,\n  Text,\n  Link as KodiakLink,\n} from \'@kodiak-ui/primitives\'\n\nexport default { title: \'Hooks/useEventLogger\' }\n\nlet id = 0\n\nexport function LogEvent() {\n  function LogRouteEvent() {\n    const [log, setLog] = React.useState([])\n    const logEvent = useEventLogger()\n    const currentPrice = \'12345\'\n\n    useEventLoggerReducers(\n      {\n        initialEventReducers: [\n          // Add an id to the event\n          (event: Event) => {\n            // We get rid of the source event before console logging\n            // because it is a synthetic event\n            // but we still have access to it\n            const { sourceEvent, ...payload } = event?.payload\n            return {\n              ...event,\n              payload: {\n                ...payload,\n                id: ++id,\n                currentPrice,\n                role: sourceEvent?.target?.getAttribute(\'role\'),\n              },\n            }\n          },\n          // Console.log the event\n          event => {\n            if (!event) {\n              return\n            }\n            console.log(event)\n            return event\n          },\n          // add it to an event log\n          event => {\n            if (!event) {\n              return\n            }\n            setLog(log => [...log, event])\n            return event\n          },\n        ],\n      },\n      [currentPrice], // needs a dependency array if the initial config depends on these\n    )\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { key, ...location } = useLocation() // we don\'t want to watch key changes if the user stays on the same route\n\n    useEventLogRoute({ location: JSON.stringify(location, null, 2) })\n\n    return (\n      <React.Fragment>\n        <Grid sx={{ gap: 2 }}>\n          <Text as="span" variant="heading" sx={{ mt: 2 }}>\n            Choose a link to log the event\n          </Text>\n          <Link to="/home">Home</Link>\n          <Link to="/pricing">Pricing</Link>\n          <KodiakLink href="https://jilt.com" target="_blank">\n            External link\n          </KodiakLink>\n\n          <Text>Current iframe route: </Text>\n          <Switch>\n            <Route path="/pricing">Pricing</Route>\n            <Route path="/home">Home</Route>\n          </Switch>\n          <Grid sx={{ maxWidth: \'200px\', gap: 4 }}>\n            <Button\n              aria-label="aria-label for the event target"\n              onMouseOver={e => {\n                const target = e.target as HTMLButtonElement\n                logEvent({\n                  name: \'MOUSE_OVER\',\n                  payload: {\n                    sourceLabel:\n                      target?.getAttribute(\'aria-label\') || target.textContent,\n                  },\n                })\n              }}\n            >\n              Fire a mouse over event\n            </Button>\n\n            <Button>\n              <Text>Button with no aria-label</Text>\n            </Button>\n\n            <AnchorButton\n              variant="secondary"\n              href="https://app.jilt.com"\n              target="_blank"\n              onClick={event => console.info(\'Clicked the anchor button\')}\n            >\n              Anchor button\n            </AnchorButton>\n          </Grid>\n        </Grid>\n\n        <Grid sx={{ mt: 4 }}>\n          <Text as="span" variant="heading" sx={{ mt: 2 }}>\n            List of events\n          </Text>\n          {log.map((event, index) => (\n            <Box key={index} sx={{ mt: 2 }}>\n              {JSON.stringify(event, null, 2)}\n            </Box>\n          ))}\n        </Grid>\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <div>\n      <BrowserRouter>\n        <LogRouteEvent />\n      </BrowserRouter>\n    </div>\n  )\n}\n'}}]);