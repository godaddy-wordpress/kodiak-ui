(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{123:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),d=p(n),s=a,u=d["".concat(c,".").concat(s)]||d[s]||m[s]||l;return n?r.a.createElement(u,o(o({ref:t},b),{},{components:n})):r.a.createElement(u,o({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,c=new Array(l);c[0]=s;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var b=2;b<l;b++)c[b]=n[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),l=(n(0),n(123)),c={id:"checkbox",title:"Checkbox",sidebar_label:"Checkbox"},o={unversionedId:"primitives/checkbox",id:"primitives/checkbox",isDocsHomePage:!1,title:"Checkbox",description:"Used to render a styled checkbox type input for use in forms or standalone.",source:"@site/docs/primitives/checkbox.mdx",slug:"/primitives/checkbox",permalink:"/kodiak-ui/primitives/checkbox",editUrl:"https://github.com/skyverge/kodiak-ui/tree/master/documentation/docs/primitives/checkbox.mdx",version:"current",sidebar_label:"Checkbox",sidebar:"docs",previous:{title:"Button",permalink:"/kodiak-ui/primitives/button"},next:{title:"Flex",permalink:"/kodiak-ui/primitives/flex"}},i=[{value:"Usage",id:"usage",children:[]},{value:"API",id:"api",children:[{value:"Props",id:"props",children:[]},{value:"Import",id:"import",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Indeterminate example",id:"indeterminate-example",children:[]}]}],b={toc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Used to render a styled checkbox type input for use in forms or standalone."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'<Checkbox name="dark-mode" />\n')),Object(l.b)("h2",{id:"usage"},"Usage"),Object(l.b)("p",null,"Below are examples of using the Checkbox component for rendering with and without labels as well as the indeterminate/mixed state."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'// Render a checkbox without a label\n<Checkbox name="noLabel" />\n\n// Render checkbox with label\n<Checkbox label="Displays with label" name="withLabel" />\n\n// Render indeterminate/mixed state\n<Checkbox label="Indeterminate checkbox" name="indeterminate" indeterminate={true} />\n')),Object(l.b)("h2",{id:"api"},"API"),Object(l.b)("h3",{id:"props"},"Props"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Checkbox")," will accept all normal and expected attributes for an HTML anchor element as well as the props defined below."),Object(l.b)("h3",{id:"import"},"Import"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"import { Checkbox } from '@kodiak-ui/primitives'\n")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Name"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"label"),Object(l.b)("td",{parentName:"tr",align:null},"string"),Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null},"Optionally display a label around the input, ignore to wrap your own label")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"checked"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Controlled: Determine whether checkbox is checked")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"defaultChecked"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether checked on initial render or not")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"indeterminate"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Display the 'mixed' state of a checkbox")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"variant"),Object(l.b)("td",{parentName:"tr",align:null},"string"),Object(l.b)("td",{parentName:"tr",align:null},"checkbox"),Object(l.b)("td",{parentName:"tr",align:null},"Name of the variant from the theme")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"variantKey"),Object(l.b)("td",{parentName:"tr",align:null},"string"),Object(l.b)("td",{parentName:"tr",align:null},"forms"),Object(l.b)("td",{parentName:"tr",align:null},"Name of the variant key in the theme to know where to find the variant")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"sx"),Object(l.b)("td",{parentName:"tr",align:null},"SxStyleProp"),Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null},"Style object for the component")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"onChange"),Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null},"Callback when input changes")))),Object(l.b)("h2",{id:"examples"},"Examples"),Object(l.b)("h3",{id:"indeterminate-example"},"Indeterminate example"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},'const [checkedItems, setCheckedItems] = React.useState<{\n  [key: string]: boolean\n}>({\n  option1: false,\n  option2: false,\n})\n\nconst allChecked = Object.keys(checkedItems)\n  ?.map(key => checkedItems[key] === true)\n  ?.every(Boolean)\nconst someChecked = Object.keys(checkedItems)\n  ?.map(key => checkedItems[key] === true)\n  ?.some(Boolean)\n\nreturn (\n  <>\n    <Checkbox\n      label="Select all"\n      checked={allChecked}\n      indeterminate={someChecked && !allChecked}\n      onChange={e =>\n        setCheckedItems({\n          option1: e.target.checked,\n          option2: e.target.checked,\n        })\n      }\n    />\n    <Flex sx={{ flexDirection: \'column\', pl: 6 }}>\n      <Checkbox\n        label="Option 1"\n        name="option1"\n        checked={checkedItems?.option1}\n        onChange={e =>\n          setCheckedItems({\n            ...checkedItems,\n            option1: e.target.checked,\n          })\n        }\n      />\n      <Checkbox\n        label="Option 2"\n        name="option2"\n        checked={checkedItems?.option2}\n        onChange={e =>\n          setCheckedItems({\n            ...checkedItems,\n            option2: e.target.checked,\n          })\n        }\n      />\n    </Flex>\n  </>\n)\n')))}p.isMDXComponent=!0}}]);